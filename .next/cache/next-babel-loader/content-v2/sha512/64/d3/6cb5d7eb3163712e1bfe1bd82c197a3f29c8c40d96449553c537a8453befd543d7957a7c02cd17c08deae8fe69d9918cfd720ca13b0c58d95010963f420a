{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/thamyrismila/Documentos/Projetos/nlw05/src/contexts/PlayerContext.tsx\";\nimport { createContext, useState, useContext } from 'react';\nexport const PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider({\n  children\n}) {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: currentEpisodeIndex,\n    1: setCurrentEpisodeIndex\n  } = useState(0);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n  const {\n    0: isLooping,\n    1: setIsLooping\n  } = useState(false);\n  const {\n    0: isShuffling,\n    1: setIsShuffling\n  } = useState(false);\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  function clearPlayerState() {\n    setE;\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = isShuffling || currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (isShuffling) {\n      const nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n      setCurrentEpisodeIndex(nextRandomEpisodeIndex);\n    } else if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList,\n      currentEpisodeIndex,\n      play,\n      playList,\n      playNext,\n      playPrevious,\n      isPlaying,\n      isLooping,\n      isShuffling,\n      togglePlay,\n      setPlayingState,\n      hasNext,\n      hasPrevious,\n      toggleLoop,\n      toggleShuffle\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n};","map":{"version":3,"sources":["/home/thamyrismila/Documentos/Projetos/nlw05/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","useContext","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","play","episode","playList","list","index","togglePlay","toggleLoop","toggleShuffle","setPlayingState","state","clearPlayerState","setE","hasPrevious","hasNext","length","playNext","nextRandomEpisodeIndex","Math","floor","random","playPrevious","usePlayer"],"mappings":"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","sourcesContent":["import { createContext, useState, ReactNode, useContext } from 'react';\n\ntype Episode = {\n    title: string;\n    members: string;\n    thumbnail: string;\n    duration: number;\n    url: string;\n};\n\ntype PlayerContextData = {\n  episodeList: Episode[];\n  currentEpisodeIndex: number; \n  isPlaying: boolean;\n  isLooping: boolean;\n  isShuffling: boolean;\n  play:(episode: Episode) => void;\n  playList:(list: Episode[], index:number) => void;\n  setPlayingState: (episode: boolean) => void;\n  togglePlay:() => void;  \n  toggleLoop :() => void;\n  toggleShuffle:() => void;    \n  playNext:() => void;\n  playPrevious:() => void;\n  hasNext: boolean;\n  hasPrevious: boolean;\n};\n\nexport const PlayerContext = createContext({} as PlayerContextData);\n\ntype PlayerContextProviderProps = {\n  children: ReactNode;\n}\n\nexport function PlayerContextProvider({children}: PlayerContextProviderProps) {\n  const [episodeList, setEpisodeList] = useState([]);\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLooping, setIsLooping] = useState(false);\n  const [isShuffling, setIsShuffling] = useState(false);\n \n\n  function play(episode: Episode ) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\nfunction playList(list : Episode[], index: number) {\n  setEpisodeList(list);\n  setCurrentEpisodeIndex(index);\n  setIsPlaying(true);\n\n}\n\n  function togglePlay(){\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop(){\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle(){\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state:boolean) {\n    setIsPlaying(state);\n  }\n\n  function clearPlayerState() {\n     setE\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = isShuffling || (currentEpisodeIndex + 1) < episodeList.length \n\n  function playNext() {\n    if (isShuffling) {\n       const nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length)\n\n       setCurrentEpisodeIndex(nextRandomEpisodeIndex);\n    } else  if (hasNext){  \n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious){\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);  \n    }\n    \n  }\n   \n  return (\n    <PlayerContext.Provider \n    value={{\n      episodeList, \n      currentEpisodeIndex,\n      play,\n      playList,\n      playNext,\n      playPrevious,\n      isPlaying,\n      isLooping,\n      isShuffling,\n      togglePlay, \n      setPlayingState,\n      hasNext,\n      hasPrevious,\n      toggleLoop,\n      toggleShuffle\n    }}\n  >\n    {children}\n  </PlayerContext.Provider>\n  )\n}\n\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n}"]},"metadata":{},"sourceType":"module"}