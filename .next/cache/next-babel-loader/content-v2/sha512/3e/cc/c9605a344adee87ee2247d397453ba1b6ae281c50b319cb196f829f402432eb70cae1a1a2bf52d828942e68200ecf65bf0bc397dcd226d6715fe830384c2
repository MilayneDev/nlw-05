{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/thamyrismila/Documentos/Projetos/nlw05/src/contexts/PlayerContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useState, useContext } from 'react';\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  var _useState4 = useState(false),\n      isLooping = _useState4[0],\n      setIsLooping = _useState4[1];\n\n  var _useState5 = useState(false),\n      isShuffLing = _useState5[0],\n      setIsShuffLing = _useState5[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffLing);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  var hasPrevious = currentEpisodeIndex > 0;\n  var hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      playList: playList,\n      playNext: playNext,\n      playPrevious: playPrevious,\n      isPlaying: isPlaying,\n      isLooping: isLooping,\n      isShuffling: isShuffling,\n      togglePlay: togglePlay,\n      setPlayingState: setPlayingState,\n      hasNext: hasNext,\n      hasPrevious: hasPrevious,\n      toggleLoop: toggleLoop,\n      toggleShuffle: toggleShuffle\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PlayerContextProvider, \"DAWdT4Dk0spmsMC2DQKwzEYPb9Y=\");\n\n_c = PlayerContextProvider;\nexport var usePlayer = function usePlayer() {\n  _s2();\n\n  return useContext(PlayerContext);\n};\n\n_s2(usePlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["/home/thamyrismila/Documentos/Projetos/nlw05/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","useContext","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffLing","setIsShuffLing","play","episode","playList","list","index","togglePlay","toggleLoop","toggleShuffle","setIsShuffling","setPlayingState","state","hasPrevious","hasNext","length","playNext","playPrevious","isShuffling","usePlayer"],"mappings":"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","sourcesContent":["import { createContext, useState, ReactNode, useContext } from 'react';\n\ntype Episode = {\n    title: string;\n    members: string;\n    thumbnail: string;\n    duration: number;\n    url: string;\n};\n\ntype PlayerContextData = {\n  episodeList: Episode[];\n  currentEpisodeIndex: number; \n  isPlaying: boolean;\n  isLooping: boolean;\n  play:(episode: Episode) => void;\n  playList:(list: Episode[], index:number) => void;\n  setPlayingState: (episode: boolean) => void;\n  togglePlay:() => void;  \n  toggleLoop :() => void;\n  toggleShuffle:() => void;    \n  playNext:() => void;\n  playPrevious:() => void;\n  hasNext: boolean;\n  hasPrevious: boolean;\n};\n\nexport const PlayerContext = createContext({} as PlayerContextData);\n\ntype PlayerContextProviderProps = {\n  children: ReactNode;\n}\n\nexport function PlayerContextProvider({children}: PlayerContextProviderProps) {\n  const [episodeList, setEpisodeList] = useState([]);\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLooping, setIsLooping] = useState(false);\n  const [isShuffLing, setIsShuffLing] = useState(false);\n \n\n  function play(episode: Episode ) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\nfunction playList(list : Episode[], index: number) {\n  setEpisodeList(list);\n  setCurrentEpisodeIndex(index);\n  setIsPlaying(true);\n\n}\n\n  function togglePlay(){\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop(){\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle(){\n    setIsShuffling(!isShuffLing);\n  }\n\n  function setPlayingState(state:boolean) {\n    setIsPlaying(state);\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = (currentEpisodeIndex + 1) < episodeList.length \n\n  function playNext() {\n     if (hasNext){  \n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious){\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);  \n    }\n    \n  }\n   \n  return (\n    <PlayerContext.Provider \n    value={{\n      episodeList, \n      currentEpisodeIndex,\n      play,\n      playList,\n      playNext,\n      playPrevious,\n      isPlaying,\n      isLooping,\n      isShuffling,\n      togglePlay, \n      setPlayingState,\n      hasNext,\n      hasPrevious,\n      toggleLoop,\n      toggleShuffle\n    }}\n  >\n    {children}\n  </PlayerContext.Provider>\n  )\n}\n\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n}"]},"metadata":{},"sourceType":"module"}