{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/thamyrismila/Documentos/Projetos/nlw05/src/contexts/PlayerContext.tsx\";\nimport { createContext, useState } from 'react';\nexport const PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider({\n  children\n}) {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: currentEpisodeIndex,\n    1: setCurrentEpisodeIndex\n  } = useState(0);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList,\n      currentEpisodeIndex,\n      play,\n      playList,\n      playNext,\n      playPrevious,\n      isPlaying,\n      togglePlay,\n      setPlayingState,\n      hasNext\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/thamyrismila/Documentos/Projetos/nlw05/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","play","episode","playList","list","index","togglePlay","setPlayingState","state","hasPrevious","hasNext","length","playNext","playPrevious"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AAyBA,OAAO,MAAMC,aAAa,gBAAGF,aAAa,CAAC,EAAD,CAAnC;AAMP,OAAO,SAASG,qBAAT,CAA+B;AAACC,EAAAA;AAAD,CAA/B,EAAuE;AAC5E,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCL,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAACM,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDP,QAAQ,CAAC,CAAD,CAA9D;AACA,QAAM;AAAA,OAACQ,SAAD;AAAA,OAAYC;AAAZ,MAA4BT,QAAQ,CAAC,KAAD,CAA1C;;AAEA,WAASU,IAAT,CAAcC,OAAd,EAAiC;AAC/BN,IAAAA,cAAc,CAAC,CAACM,OAAD,CAAD,CAAd;AACAJ,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAEH,WAASG,QAAT,CAAkBC,IAAlB,EAAoCC,KAApC,EAAmD;AACjDT,IAAAA,cAAc,CAACQ,IAAD,CAAd;AACAN,IAAAA,sBAAsB,CAACO,KAAD,CAAtB;AACAL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAED;;AAEC,WAASM,UAAT,GAAqB;AACnBN,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASQ,eAAT,CAAyBC,KAAzB,EAAwC;AACtCR,IAAAA,YAAY,CAACQ,KAAD,CAAZ;AACD;;AAED,QAAMC,WAAW,GAAGZ,mBAAmB,GAAG,CAA1C;AACA,QAAMa,OAAO,GAAIb,mBAAmB,GAAG,CAAvB,GAA4BF,WAAW,CAACgB,MAAxD;;AAEA,WAASC,QAAT,GAAoB;AACjB,QAAIF,OAAJ,EAAY;AACXZ,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;AACF;;AAED,WAASgB,YAAT,GAAwB;AACtB,QAAIJ,WAAJ,EAAgB;AACdX,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;AAEF;;AAED,sBACE,QAAC,aAAD,CAAe,QAAf;AACA,IAAA,KAAK,EAAE;AACLF,MAAAA,WADK;AAELE,MAAAA,mBAFK;AAGLI,MAAAA,IAHK;AAILE,MAAAA,QAJK;AAKLS,MAAAA,QALK;AAMLC,MAAAA,YANK;AAOLd,MAAAA,SAPK;AAQLO,MAAAA,UARK;AASLC,MAAAA,eATK;AAULG,MAAAA;AAVK,KADP;AAAA,cAeChB;AAfD;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD","sourcesContent":["import { createContext, useState, ReactNode } from 'react';\n\ntype Episode = {\n    title: string;\n    members: string;\n    thumbnail: string;\n    duration: number;\n    url: string;\n};\n\ntype PlayerContextData = {\n  episodeList: Episode[];\n  currentEpisodeIndex: number; \n  isPlaying: boolean;\n  play:(episode: Episode) => void;\n  playList:(list: Episode[], index:number) => void;\n  setPlayingState: (episode: boolean) => void;\n  togglePlay:() => void;  \n  playNext:() => void;\n  playPrevious:() => void;\n\n\n\n};\n\nexport const PlayerContext = createContext({} as PlayerContextData);\n\ntype PlayerContextProviderProps = {\n  children: ReactNode;\n}\n\nexport function PlayerContextProvider({children}: PlayerContextProviderProps) {\n  const [episodeList, setEpisodeList] = useState([]);\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  function play(episode: Episode ) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\nfunction playList(list : Episode[], index: number) {\n  setEpisodeList(list);\n  setCurrentEpisodeIndex(index);\n  setIsPlaying(true);\n\n}\n\n  function togglePlay(){\n    setIsPlaying(!isPlaying);\n  }\n\n  function setPlayingState(state:boolean) {\n    setIsPlaying(state);\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = (currentEpisodeIndex + 1) < episodeList.length \n\n  function playNext() {\n     if (hasNext){  \n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious){\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);  \n    }\n    \n  }\n   \n  return (\n    <PlayerContext.Provider \n    value={{\n      episodeList, \n      currentEpisodeIndex,\n      play,\n      playList,\n      playNext,\n      playPrevious,\n      isPlaying, \n      togglePlay, \n      setPlayingState,\n      hasNext,\n      \n    }}\n  >\n    {children}\n  </PlayerContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}